<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="symaut" default="main" basedir=".">
  <!-- vim: set tabstop=2 shiftwidth=2 expandtab filetype=ant : -->
  <!-- here is the version of Ivy we will use. change this property to try a newer
  version if you want -->
  <property name="ivy.install.version" value="2.4.0"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

  <property name="antlr.install.version" value="4.7.2-complete"/>
  <property name="antlr.jar.dir" value="${basedir}/antlr"/>
  <property name="antlr.jar.file" value="${antlr.jar.dir}/antlr.jar"/>

  <property name="src.dir" location="src"/>
  <property name="build.dir" location="bin"/>
  <property name="dist.dir" location="dist"/>
  <property name="dist.lib.dir" location="dist/lib"/>
  <property name="lib.dir" value="lib"/>
  <property name="main-class" value="test/MainTestSwMonitors" />
  <property name="projectName" value="symaut" />

  <!-- ivy start -->
  <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <echo message="installing ivy..."/>
    <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>
  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <!-- ivy to get dependencies and copy to project lib folder automatically -->
  <target name="resolve" description="retrieve dependencies with ivy" depends="install-ivy">
    <ivy:retrieve />
  </target>
  <!-- ivy end -->

  <target name="init" depends="resolve">
    <mkdir dir="${build.dir}" />
  </target>

  <!-- external libraries classpath, we don't need sources and javadoc -->
  <path id="classpath">
    <fileset dir="${basedir}/">
      <include name="${lib.dir}/*.jar" />
      <exclude name="${lib.dir}/*sources.jar"/>
      <exclude name="${lib.dir}/*javadoc.jar"/>
    </fileset>
  </path>


  <!-- install Antlr4 -->
  <target name="antlr" description="Get Antlr4">
    <mkdir dir="${antlr.jar.dir}"/>
    <get src="https://www.antlr.org/download/antlr-${antlr.install.version}.jar" dest="${antlr.jar.file}" usetimestamp="true"/>
  </target>

  <path id="antlr_cp">
    <pathelement location="${antlr.jar.file}"/>
  </path>

  <!-- Generate Sources from Antlr4 Grammar -->
  <path id="sources.antlr4.stl">
    <fileset dir="${src.dir}/parser" includes="*.g4"/>
  </path>
  <path id="sources.antlr4.cst">
    <fileset dir="${src.dir}/cst_parser" includes="*.g4"/>
  </path>
  <target name="stl-gen" description="Generate parser for STL" depends="antlr">
    <java classname="org.antlr.v4.Tool" fork="true" failonerror="true">
      <arg value="-o"/>
      <arg value="${src.dir}/gen"/>
      <arg value="-listener"/>
      <arg value="-visitor"/>
      <arg value="-Xexact-output-dir"/>
      <arg line="${src.dir}/parser/StlLexer.g4 ${src.dir}/parser/StlParser.g4"/>
      <classpath>
        <path refid="antlr_cp"/>
      </classpath>
    </java>
  </target>

  <target name="cst-gen" description="Generate parser for Cst" depends="antlr">
    <java classname="org.antlr.v4.Tool" fork="true" failonerror="true">
      <arg value="-o"/>
      <arg value="${src.dir}/cst_gen"/>
      <arg value="-listener"/>
      <arg value="-visitor"/>
      <arg value="-Xexact-output-dir"/>
      <arg line="${src.dir}/cst_parser/CstLexer.g4 ${src.dir}/cst_parser/CstParser.g4"/>
      <classpath>
        <path refid="antlr_cp"/>
      </classpath>
    </java>
  </target>

  <target name="generate" description="Generate ANTLR files" depends="cst-gen, stl-gen"/>

  <target name="clean-gen" description="Clean up files generated by Antlr4">
    <delete dir="${src.dir}/cst_gen" />
    <delete dir="${src.dir}/gen" />
  </target>

  <!-- To work with external libraries, need classpath to compile -->
  <target name="compile" depends="init" description="compile the source ">
    <javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
  </target>

  <!-- constructs the external libraries classpath name -->
  <pathconvert property="classpath.name" pathsep=" ">
    <path refid="classpath" />
    <mapper>
      <chainedmapper>
        <flattenmapper />
        <globmapper from="*.jar" to="lib/*.jar" />
      </chainedmapper>
    </mapper>
  </pathconvert>

  <target name="copy-dependencies">
    <copy todir="${dist.lib.dir}">
      <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
    </copy>
  </target>

  <!-- jar it, and declares the ext libraries in manifest.mf file -->
  <target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

    <echo message="classpath.name : ${classpath.name} " />

    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.lib.dir}" />

    <jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Class-Path" value="${classpath.name}" />
      </manifest>
    </jar>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
  </target>

  <!-- Default, run this -->
  <target name="main" depends="clean, compile, jar" />

</project>
